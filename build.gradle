#!/usr/bin/env groovy
/*
 * Build script for gradle-base-plugins
 * Copyright Â© 2017-2018  Basil Peace
 *
 * This file is part of gradle-base-plugins.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
plugins {
  id 'org.fidata.project.java'
  id 'org.fidata.project.groovy'
  id 'org.fidata.plugin'
}

description = 'Base plugins for Gradle projects and plugins developed by FIDATA'
tags.set(['defaults', 'opinions', 'opinionated', 'conventions', 'internal'])
//noinspection GroovyUnusedAssignment
license = 'Apache-2.0'
//noinspection GroovyUnusedAssignment
publicReleases = false
contacts {
  'grv87@yandex.ru' {
    moniker 'Basil Peace'
    github 'grv87'
    roles 'owner', 'developer'
  }
}

ext.rootDir = '.'

sourceSets {
  exceptions {
    java.srcDirs = [new File(project.ext.rootDir, 'src/exceptions/java')]
    groovy.srcDirs = [new File(project.ext.rootDir, 'src/exceptions/groovy')]
  }
  main {
    java.srcDirs new File(project.ext.rootDir, 'src/dependencyUtils/java')
    groovy.srcDirs += [
      new File(project.ext.rootDir, 'src/dependencyUtils/groovy'),
      new File(project.ext.rootDir, 'src/plugin-dependees/groovy'),
    ]
  }
}

apply from: new File(ext.rootDir, 'gradle/dependencies-compile.gradle')

groovydoc.source sourceSets.exceptions.groovy

jar {
  from sourceSets.exceptions.output
  dependsOn exceptionsClasses
}

/*
 * WORKAROUND:
 * https://github.com/DanySK/javadoc.io-linker/issues/5
 * `org.danilopianini.javadoc.io-linker` plugin doesn't work with `java-library` plugin
 * <grv87 2018-06-23>
 */
afterEvaluate {
  jvm.javadocLinks['org.spdx'] = uri("https://static.javadoc.io/org.spdx/spdx-tools/${ configurations.getByName('compileClasspath').resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleGroup == 'org.spdx' && it.moduleName == 'spdx-tools' }.moduleVersion }/index.html?")
}

apply from: new File(ext.rootDir, 'gradle/gradle-plugin-markers.gradle')

dependencies {
  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '[1, 2['
}

sourceSets {
  testFixtures {
    groovy.srcDirs = ['src/testFixtures/groovy']
  }
}

dependencies {
  testFixturesImplementation localGroovy()
  testFixturesImplementation gradleApi()
  testFixturesImplementation gradleTestKit()
  functionalTestImplementation sourceSets.testFixtures.output
  compatTestImplementation sourceSets.testFixtures.output
}

import static org.fidata.gradle.ProjectPlugin.GRADLE_MINIMUM_SUPPORTED_VERSION

stutter {
  java(8) {
    compatibleRange GRADLE_MINIMUM_SUPPORTED_VERSION
  }
  java(9) {
    compatibleRange GRADLE_MINIMUM_SUPPORTED_VERSION
  }
}

/*
 * TOTEST:
 * Looks like there is no built-in way to get collection of TaskProvider.
 * This is workaround, but it could trigger creation of tasks
 * <grv87 2018-08-23>
 */
project.tasks.withType(Test).matching { Test test -> test.name =~ org.fidata.gradle.GradlePluginPlugin.COMPAT_TEST_TASK_NAME_PATTERN }.configureEach {
  systemProperty 'org.fidata.compatTest.artifactoryUser', artifactoryUser
  systemProperty 'org.fidata.compatTest.artifactoryPassword', artifactoryPassword
}

tasks.named('codenarcBuildSrc').configure {
  disabledRules.add 'DuplicateNumberLiteral'
}

tasks.register('codenarcMainResources', CodeNarc) {
  for (File srcDir in sourceSets.main.resources.srcDirs) {
    source fileTree(dir: srcDir, includes: ['**/*.groovy'])
  }
}
